{"version":3,"sources":["Display.js","BoxButton.js","ControlButton.js","App.js","serviceWorker.js","index.js"],"names":["Display","_this$props","this","props","isLive","amount","units","react_default","a","createElement","className","concat","Component","BoxButton","handleClick","e","enough","_this","onLongClick","onClick","label","longClickDelay","main_default","time","onEnd","defaultProps","ControlButton","GR_IN_OZ","padWithZeros","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","resolveDisplayAmount","_this$state","state","totalAmount","isUnit","unitAmount","currentAmount","showAll","hadChange","iterationMode","resolvedAmount","Math","round","getAmountByUnit","onControlClickCover","_this$state2","isCoverOpen","setState","onDisplayClick","onDisplayLongClick","_this$state3","onPowerButtonLongClick","onPowerButtonClick","_this$state4","turnOff","onCoverButtonClick","_this$state5","inputAmount","_this2","_this$state6","onChange","event","Number","target","value","type","src_ControlButton","src_Display","src_BoxButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.571458d7.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Display extends Component {\n\n  render () {\n    const {isLive, amount, units} = this.props\n    return (\n      <div className={`Display ${isLive ? 'On' : 'Off'}`}>\n        {isLive && <div className=\"Display-units\">{units}</div>}\n        {isLive && <div className=\"Display-amount\">{amount}</div>}\n      </div>\n    )\n  }\n}\n\nexport default Display\n","import React, { Component } from 'react'\nimport ClickNHold from 'react-click-n-hold'\n\nclass BoxButton extends Component {\n  render () {\n    const {label, longClickDelay} = this.props\n    return (\n      <ClickNHold\n        time={longClickDelay}\n        onEnd={this.handleClick}>\n        <div className='Button'>\n          {label}\n        </div>\n      </ClickNHold>\n    )\n  }\n\n  handleClick = (e, enough) => {return enough ? this.props.onLongClick() : this.props.onClick()}\n\n}\n\nBoxButton.defaultProps = {\n  longClickDelay: 1.7,\n  onLongClick: () => {},\n  onClick: () => {}\n}\nexport default BoxButton\n","import React, { Component } from 'react'\n\nclass ControlButton extends Component {\n  render () {\n    const {onClick, label, className} = this.props\n    return (\n      <div\n        className={className}\n        onClick={onClick}>\n        {label}\n      </div>\n    )\n  }\n}\n\nexport default ControlButton\n","import React, { Component } from 'react'\nimport './App.scss'\nimport Display from './Display'\nimport BoxButton from './BoxButton'\nimport ControlButton from './ControlButton'\n\nconst UNIT = 'units'\nconst GR_IN_OZ = 0.035274\n\nfunction getAmountByUnit (isUnit, amount, unitAmount, units) {\n  let resolvedAmount = units === 'oz' ? amount * GR_IN_OZ : amount\n  resolvedAmount = isUnit ? (resolvedAmount / unitAmount) : resolvedAmount\n  return Math.round(100 * resolvedAmount) / 100\n}\n\nconst padWithZeros = amount => {\n  if ((amount * 100) % 100 === 0) {\n    return `${amount}.00`\n  }\n  if ((amount * 10) % 100 === 0 && (amount * 10) % 10 !== 0) {\n    return `${amount}0`\n  }\n  return amount\n}\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      hadChange: false,\n      showAll: true,\n      isLive: false,\n      isCoverOpen: false,\n      isUnit: false,\n      totalAmount: 0,\n      inputAmount: '',\n      currentAmount: 0,\n      unitAmount: 0.05,\n      units: 'gr'\n    }\n  }\n\n  render () {\n    const {isLive, isCoverOpen, totalAmount, units, isUnit, unitAmount, currentAmount, inputAmount, showAll, hadChange} = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"Control\">\n          <div>\n            <div>{`Status: ${isLive ? 'On' : 'Off'}`}</div>\n            <div>{`Cover: ${isCoverOpen ? 'Open' : 'Close'}`}</div>\n            <div>{`Unit: ${unitAmount}`}</div>\n            <div>{`Total Amount: ${totalAmount}`}</div>\n            <div>{`Current Amount: ${currentAmount}`}</div>\n          </div>\n          <input\n            onChange={event => isCoverOpen && this.setState({inputAmount: Number(event.target.value)})}\n            type=\"number\" className=\"Input\" value={inputAmount}/>\n          <div>\n            <ControlButton\n              className={'Button ControlButton'}\n              onClick={() => this.onControlClickCover(\n                totalAmount + inputAmount,\n                currentAmount + inputAmount)}\n              label='+'\n            />\n            <ControlButton\n              className={'Button ControlButton'}\n              onClick={() => this.onControlClickCover(\n                totalAmount - inputAmount,\n                currentAmount - inputAmount)}\n              label='-'\n            />\n          </div>\n          <ControlButton\n            className={'Button'}\n            onClick={this.onCoverButtonClick}\n            label='Cover'\n          />\n        </div>\n        <div className=\"Box\">\n          {!isCoverOpen && <div className='Cover'/>}\n          <Display\n            isLive={isLive}\n            amount={this.resolveDisplayAmount()}\n            units={isUnit ? UNIT : units}/>\n          <div className='Buttons'>\n            <BoxButton\n              onClick={this.onPowerButtonClick}\n              onLongClick={this.onPowerButtonLongClick}\n              label='Power'\n            />\n            <BoxButton\n              onClick={this.onDisplayClick}\n              onLongClick={this.onDisplayLongClick}\n              label='Display'\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  resolveDisplayAmount = () => {\n    const {totalAmount, isUnit, unitAmount, currentAmount, showAll, hadChange, units} = this.state\n    const iterationMode = hadChange && !showAll\n    const amount = iterationMode ? currentAmount : totalAmount\n    const shouldDisplayPlus = iterationMode && (currentAmount > 0)\n    return (shouldDisplayPlus ? '+' : '') + padWithZeros(getAmountByUnit(isUnit, amount, unitAmount, units))\n  }\n\n  onControlClickCover = (totalAmount, currentAmount) => {\n    const {hadChange, isCoverOpen} = this.state\n    !hadChange && this.setState({\n      currentAmount: 0,\n      hadChange: true\n    })\n    isCoverOpen && this.setState({\n      totalAmount,\n      currentAmount,\n    })\n  }\n  onDisplayClick = () => {\n    const {isUnit} = this.state\n    this.setState({isUnit: !isUnit})\n  }\n  onDisplayLongClick = () => {\n    const {isUnit, units, totalAmount} = this.state\n    if (isUnit) {\n      this.setState({unitAmount: totalAmount})\n    } else {\n      this.setState({units: units === 'oz' ? 'gr' : 'oz'})\n    }\n  }\n  onPowerButtonLongClick = () => {\n    const {isCoverOpen} = this.state\n    isCoverOpen && this.setState({currentAmount: 0})\n\n  }\n  onPowerButtonClick = () => {\n    const {isLive, isCoverOpen, showAll} = this.state\n    if (isLive) {\n      if (isCoverOpen) {\n        this.setState({showAll: !showAll})\n      } else {\n        this.turnOff()\n      }\n    } else {\n      this.setState({isLive: true})\n    }\n  }\n  onCoverButtonClick = () => {\n    const {isLive, isCoverOpen} = this.state\n    this.setState({\n      isCoverOpen: !isCoverOpen,\n      showAll: isCoverOpen\n    })\n    isCoverOpen && this.setState({currentAmount: 0})\n    !isLive && !isCoverOpen && this.setState({isLive: true})\n  }\n  // handleButtonPress = () => {\n  //   this.buttonPressTimer = setTimeout(() => this.onPowerButtonLongClick(), 1500)\n  // }\n  // handleButtonRelease = () => clearTimeout(this.buttonPressTimer)\n  turnOff = () => this.setState({isLive: false, hadChange: false, inputAmount: '', currentAmount: 0})\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}